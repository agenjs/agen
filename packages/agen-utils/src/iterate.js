/**
 * Creates a new iterator and allows to "push" values to it.
 * Features:
 * - don't "swallow" provided data
 * - synchronizes data providers and consumers; useful to manage "backpressures"
 * - always notifies providers about the end of the iteration
 * @param init {Function} - a function accepting an object with the `next`,
 * `complete` and `error` methods and returning an optional cleanup method.
 *  Structure of the object accepted by the initialization function:
 *  - `async next(value)` - provides values for the iterator
 *  - `async complete()` - notifies about the end of iterations
 *  - `async error(error)` - notifies about an error generated by the provider
 *  This init method can return an optional cleanup function which is
 *  called at the end of the iteration process.
 * @param queue {object} an optional queue object providing two methods:
 *  - `async push(value)` - add a new value in the queue
 *  - `async shift()` - removes the first value from the queue
 * @return an async generator over provided values
 */
import { iterator } from './iterator.js';

export function iterate(init, queue = []) {
  return iterator(init, queue)();
}
